package com.blog.macgyver.blogapp.Activities;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.blog.macgyver.blogapp.R;
import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestOptions;
import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.theartofdev.edmodo.cropper.CropImage;
import com.theartofdev.edmodo.cropper.CropImageView;

import java.util.HashMap;
import java.util.Map;

import de.hdodenhof.circleimageview.CircleImageView;

public class SetUpActivity extends AppCompatActivity {

    private Uri mainImageUri = null;

    private String user_id;

    private boolean isChanged = false;

    private CircleImageView setupImage;
    private EditText setupName;
    private Button savebtn;

    private StorageReference mStorageRef;
    private FirebaseFirestore db;
    private FirebaseAuth mAuth;

    private ProgressDialog progressDialog;
    private Toolbar setupToolbar;

    @Override
    protected void onCreate(Bundle savedInstanceState)  {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_set_up);

        setupToolbar = findViewById(R.id.setup_toolbar);
        setSupportActionBar(setupToolbar);
        getSupportActionBar().setTitle("Account Setup");

        setupImage = findViewById(R.id.profilePicture);
        setupName = findViewById(R.id.name_input_id);
        savebtn = findViewById(R.id.save_btn_id);

        mStorageRef = FirebaseStorage.getInstance().getReference();
        db = FirebaseFirestore.getInstance();
        mAuth = FirebaseAuth.getInstance();

        progressDialog = new ProgressDialog(this);

        user_id = mAuth.getCurrentUser().getUid();

        savebtn.setEnabled(false );

        showProgressDialog2();

        //retrieving data(name and image/image url) from firestore
        db.collection("Users").document(user_id).get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()){

                    //to check if name and image/image url exists from firestore
                    if (task.getResult().exists()){

                        //retrieve name and image/image url from firestore
                        String name = task.getResult().getString("name");
                        String image = task.getResult().getString("image");

                        mainImageUri = Uri.parse(image);

                        setupName.setText(name);

                        RequestOptions placeHolderRequuest = new RequestOptions();
                        placeHolderRequuest.placeholder(R.drawable.profile2);
                        Glide.with(SetUpActivity.this)
                                .setDefaultRequestOptions(placeHolderRequuest).load(image).into(setupImage);

                    }

                    else{

                        //if data does not exist from firestore, toast message will pop up
                        Toast.makeText(SetUpActivity.this,
                                "Data Doesn't Exist"
                                , Toast.LENGTH_SHORT).show();

                    }

                }

                else{

                    String error = task.getException().getMessage();
                    Toast.makeText(SetUpActivity.this,
                            "(FIRESTORE Retrieve Error) : " + error
                            , Toast.LENGTH_SHORT).show();

                }

                hideProgressDailog();
                savebtn.setEnabled(true);
            }
        });


        setupImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){

                    if (ContextCompat.checkSelfPermission(SetUpActivity.this,
                            Manifest.permission.READ_EXTERNAL_STORAGE)
                            != PackageManager.PERMISSION_GRANTED){

                        Toast.makeText(SetUpActivity.this, "Permission Denied",
                                Toast.LENGTH_SHORT).show();

                        ActivityCompat.requestPermissions(SetUpActivity.this,
                                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                                1);
                    }

                    else{

                        BringImagePicker();

                    }
                }

                else{

                    BringImagePicker();

                }
            }
        });

        savebtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                final String name = setupName.getText().toString().trim();
                if (!TextUtils.isEmpty(name) && mainImageUri != null) {

                    showProgressDialog();

                    if (isChanged) {


                        user_id = mAuth.getCurrentUser().getUid();

                        final StorageReference image_path = mStorageRef.child("profile_images")
                                .child(user_id + ".jpg");

                        image_path.putFile(mainImageUri).continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {
                            @Override
                            public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {
                                if (!task.isSuccessful()) {
                                    throw task.getException();
                                }
                                return image_path.getDownloadUrl();
                            }
                        }).addOnCompleteListener(new OnCompleteListener<Uri>() {
                            @Override
                            public void onComplete(@NonNull Task<Uri> task) {
                                if (task.isSuccessful()) {

                                    storeFirestore(task, name);
                                } else {

                                    String error = task.getException().getMessage();
                                    Toast.makeText(SetUpActivity.this, "(IMAGE Error) : "
                                                    + error
                                            , Toast.LENGTH_SHORT).show();
                                }
                                hideProgressDailog();
                            }
                        });
                    }

                    else {

                        storeFirestore(null, name);

                    }
                }
            }
        });

    }

    private void storeFirestore(Task<Uri> task, String name) {

        Uri uri;

        if (task != null) {

            uri = task.getResult();
        }

        else{

            uri = mainImageUri;

        }
        String DownloadUrl = uri.toString();//this is the image url

        Map<String, String> userMap = new HashMap<>();

        userMap.put("name", name);
        userMap.put("image", DownloadUrl);

        db.collection("Users").document(user_id).set(userMap).addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {
                if (task.isSuccessful()){
                    Toast.makeText(SetUpActivity.this,
                            "The user profile is updated"
                            , Toast.LENGTH_SHORT).show();
                    updateUI();
                    finish();
                }

                else{

                    String error = task.getException().getMessage();
                    Toast.makeText(SetUpActivity.this,
                            "(FIRESTORE Error) : " + error
                            , Toast.LENGTH_SHORT).show();
                }

            }
        });
    }

    private void BringImagePicker() {
        CropImage.activity()
                .setGuidelines(CropImageView.Guidelines.ON)
                .setAspectRatio(1,1)
                .start(SetUpActivity.this);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {

            CropImage.ActivityResult result = CropImage.getActivityResult(data);

            if (resultCode == RESULT_OK) {

                mainImageUri = result.getUri();
                setupImage.setImageURI(mainImageUri);
                isChanged = true;

            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {

                Exception error = result.getError();
            }
        }
    }

    private void showProgressDialog() {
        progressDialog.setMessage("Saving...");
        progressDialog.show();
    }

    private void showProgressDialog2() {
        progressDialog.setMessage("Loading...");
        progressDialog.show();
    }

    private void hideProgressDailog() {

        progressDialog.dismiss();
    }

    private void updateUI() {
        startActivity(new Intent(getApplicationContext(), MainActivity.class));
        finish();
    }
}
                                                                                    